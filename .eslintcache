[{"C:\\Users\\pillo\\recipebook\\src\\App.js":"1","C:\\Users\\pillo\\recipebook\\src\\routes\\privateRoute.js":"2","C:\\Users\\pillo\\recipebook\\src\\adminPage\\createCategory.js":"3","C:\\Users\\pillo\\recipebook\\src\\redux\\types.js":"4","C:\\Users\\pillo\\recipebook\\src\\pages\\recipeDetails.js":"5","C:\\Users\\pillo\\recipebook\\src\\pages\\signin.js":"6","C:\\Users\\pillo\\recipebook\\src\\pages\\signup.js":"7","C:\\Users\\pillo\\recipebook\\src\\adminPage\\createRecipe.js":"8","C:\\Users\\pillo\\recipebook\\src\\redux\\actions\\index.js":"9","C:\\Users\\pillo\\recipebook\\src\\redux\\actions\\recipe.js":"10","C:\\Users\\pillo\\recipebook\\src\\pages\\home.js":"11","C:\\Users\\pillo\\recipebook\\src\\pages\\newRecipes.js":"12","C:\\Users\\pillo\\recipebook\\src\\redux\\store.js":"13","C:\\Users\\pillo\\recipebook\\src\\components\\navbar.js":"14","C:\\Users\\pillo\\recipebook\\src\\index.js":"15","C:\\Users\\pillo\\recipebook\\src\\components\\footer.js":"16","C:\\Users\\pillo\\recipebook\\src\\pages\\default.js":"17","C:\\Users\\pillo\\recipebook\\src\\pages\\about.js":"18","C:\\Users\\pillo\\recipebook\\src\\pages\\mainHomepage.js":"19","C:\\Users\\pillo\\recipebook\\src\\adminPage\\adminPage.js":"20","C:\\Users\\pillo\\recipebook\\src\\routes\\adminRoute.js":"21","C:\\Users\\pillo\\recipebook\\src\\pages\\allRecipe.js":"22","C:\\Users\\pillo\\recipebook\\src\\redux\\reducers\\recipeReducers.js":"23","C:\\Users\\pillo\\recipebook\\src\\redux\\reducers\\categoryReducers.js":"24","C:\\Users\\pillo\\recipebook\\src\\redux\\reducers\\userReducers.js":"25","C:\\Users\\pillo\\recipebook\\src\\redux\\combineActions.js":"26","C:\\Users\\pillo\\recipebook\\src\\redux\\actions\\user.js":"27","C:\\Users\\pillo\\recipebook\\src\\redux\\actions\\category.js":"28","C:\\Users\\pillo\\recipebook\\src\\routes\\loggedInRoute.js":"29","C:\\Users\\pillo\\recipebook\\src\\pages\\searchPage.js":"30","C:\\Users\\pillo\\recipebook\\src\\components\\navbarLow.js":"31"},{"size":1855,"mtime":1611661100089,"results":"32","hashOfConfig":"33"},{"size":773,"mtime":1611498877209,"results":"34","hashOfConfig":"33"},{"size":3748,"mtime":1611682296383,"results":"35","hashOfConfig":"33"},{"size":2155,"mtime":1611498877208,"results":"36","hashOfConfig":"33"},{"size":9443,"mtime":1611683738930,"results":"37","hashOfConfig":"33"},{"size":4883,"mtime":1611682371398,"results":"38","hashOfConfig":"33"},{"size":6438,"mtime":1611682431184,"results":"39","hashOfConfig":"33"},{"size":16355,"mtime":1611683109311,"results":"40","hashOfConfig":"33"},{"size":160,"mtime":1611498851813,"results":"41","hashOfConfig":"33"},{"size":4087,"mtime":1611500126637,"results":"42","hashOfConfig":"33"},{"size":3476,"mtime":1611684650695,"results":"43","hashOfConfig":"33"},{"size":3341,"mtime":1611684658128,"results":"44","hashOfConfig":"33"},{"size":1406,"mtime":1611498877207,"results":"45","hashOfConfig":"33"},{"size":3558,"mtime":1611660712154,"results":"46","hashOfConfig":"33"},{"size":306,"mtime":1611498851803,"results":"47","hashOfConfig":"33"},{"size":158,"mtime":1611498877198,"results":"48","hashOfConfig":"33"},{"size":412,"mtime":1611498877200,"results":"49","hashOfConfig":"33"},{"size":183,"mtime":1611498877199,"results":"50","hashOfConfig":"33"},{"size":1599,"mtime":1611498877201,"results":"51","hashOfConfig":"33"},{"size":1109,"mtime":1611673888635,"results":"52","hashOfConfig":"33"},{"size":706,"mtime":1611498877208,"results":"53","hashOfConfig":"33"},{"size":4723,"mtime":1611684626494,"results":"54","hashOfConfig":"33"},{"size":3047,"mtime":1611498877206,"results":"55","hashOfConfig":"33"},{"size":905,"mtime":1611498877206,"results":"56","hashOfConfig":"33"},{"size":930,"mtime":1611498877206,"results":"57","hashOfConfig":"33"},{"size":58,"mtime":1611498851814,"results":"58","hashOfConfig":"33"},{"size":1429,"mtime":1611498877205,"results":"59","hashOfConfig":"33"},{"size":1022,"mtime":1611498877204,"results":"60","hashOfConfig":"33"},{"size":774,"mtime":1611498877209,"results":"61","hashOfConfig":"33"},{"size":4988,"mtime":1611684665942,"results":"62","hashOfConfig":"33"},{"size":4593,"mtime":1611679823624,"results":"63","hashOfConfig":"33"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1xgjjn2",{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"68"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"68"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"68"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"68"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"68"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"68"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"68"},"C:\\Users\\pillo\\recipebook\\src\\App.js",[],"C:\\Users\\pillo\\recipebook\\src\\routes\\privateRoute.js",[],["136","137"],"C:\\Users\\pillo\\recipebook\\src\\adminPage\\createCategory.js",["138"],"import React, { useEffect, useState } from 'react';\r\n\r\n//redux\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { rbook } from '../redux/combineActions';\r\n\r\n//navigation\r\nimport { Link } from 'react-router-dom';\r\n\r\n//material-ui\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport Button from '@material-ui/core/Button';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Input from '@material-ui/core/Input';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\n//styling for material ui\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n  },\r\n  margin: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  withoutLabel: {\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  textField: {\r\n    marginTop: '3%',\r\n    marginBottom: '3%',\r\n    width: '100%',\r\n    '& label.Mui-focused': {\r\n      color: '#FF3F16',\r\n    },\r\n    '& .MuiInput-underline:after': {\r\n      borderBottomColor: '#FF3F16',\r\n    },\r\n  },\r\n\r\n}));\r\n\r\nconst CreateCategory = () => {\r\n\r\n  const [name, setName] = useState('');\r\n  const [openSnackBar, setOpenSnackBar] = useState(false);\r\n\r\n  const { loading, category, error, success } = useSelector(state => state.addCategory);\r\n\r\n  const dispatch = useDispatch();\r\n  const classes = useStyles();\r\n\r\n  useEffect(() => {\r\n    if (category) {\r\n      //\r\n    }\r\n    return () => {\r\n      //\r\n    };\r\n  }, [category]);\r\n\r\n  const submitHandler = (event) => {\r\n    event.preventDefault();\r\n    dispatch(rbook.category.addCategory(name));\r\n    setOpenSnackBar(true);\r\n  }\r\n\r\n  const handleClose = (event, reason) => {\r\n    if (reason === 'clickaway') {\r\n      return;\r\n    }\r\n    setOpenSnackBar(false);\r\n  };\r\n\r\n  const showError = () => (\r\n    <Snackbar anchorOrigin={{ vertical: \"top\", horizontal: \"center\" }} open={openSnackBar} autoHideDuration={3000} onClose={handleClose}>\r\n      <Alert severity=\"error\">{error}</Alert>\r\n    </Snackbar>\r\n  );\r\n\r\n  const showSuccess= () => (\r\n    <Snackbar anchorOrigin={{ vertical: \"top\", horizontal: \"center\" }} open={openSnackBar} autoHideDuration={3000} onClose={handleClose}>\r\n      <Alert severity=\"success\">{category && category.name} category created!</Alert>\r\n    </Snackbar>\r\n  );\r\n\r\n  const createCategoryForm = () => (\r\n    <>\r\n    <center className = 'welcomeTitle'>Create new category here</center>\r\n    <div  className = 'container'>\r\n      {success && !error && showSuccess()}\r\n      {!success && error && showError()}\r\n      <form onSubmit = {submitHandler} className = 'form-container'>\r\n        <FormControl className={(classes.margin, classes.textField)}>\r\n          <InputLabel>Name of category</InputLabel>\r\n          <Input\r\n            type = \"text\"\r\n            onChange={(e) => setName(e.target.value)}\r\n            style = {{width: '100%'}}\r\n            required\r\n            label=\"category\"\r\n            id = 'name'\r\n            name = 'name'\r\n          />\r\n        </FormControl>\r\n        <Button style = {{marginTop: '3%'}} startIcon={<SaveIcon />} variant=\"contained\" type=\"submit\">Save Category</Button>\r\n        <center style = {{marginTop: '1%', fontSize: 20}} ><Link className = 'adminLinks' to = '/admin'>Go back to admin page</Link></center>\r\n      </form>\r\n    </div>\r\n    </>\r\n  )\r\n\r\n  document.title = 'Recipebook | CreateCategory'\r\n\r\n  return(\r\n    loading? <CircularProgress color = 'dark' className = 'loading1' /> :\r\n    <>\r\n     {createCategoryForm()}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default CreateCategory\r\n","C:\\Users\\pillo\\recipebook\\src\\redux\\types.js",[],"C:\\Users\\pillo\\recipebook\\src\\pages\\recipeDetails.js",["139","140","141"],"import React, { useEffect, useState } from 'react';\r\n\r\n//redux\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { rbook } from '../redux/combineActions';\r\n\r\n//navigation\r\nimport { Link } from 'react-router-dom';\r\n\r\n//material-ui\r\nimport Button from '@material-ui/core/Button';\r\nimport Rating from '@material-ui/lab/Rating';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\n//styling for material-ui\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n  },\r\n  margin: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  withoutLabel: {\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  textField: {\r\n    width: '100%',\r\n    '& label.Mui-focused': {\r\n      color: '#FF3F16',\r\n    },\r\n    '& .MuiOutlinedInput-root': {\r\n        '&.Mui-focused fieldset': {\r\n            borderColor: '#FF3F16',\r\n        },\r\n    },\r\n  },\r\n}));\r\n\r\nconst RecipeDetails = (props) => {\r\n  const {recipe, loading, error} = useSelector(state => state.recipeDetails);\r\n\r\n  const [comment, setComment] = useState('');\r\n  const [rating, setRating] = useState(0);\r\n  const [openSnackBar, setOpenSnackBar] = useState(false);\r\n\r\n  const { user } = useSelector((state) => state.userSignin);\r\n  const { userInfo } = useSelector((state) => state.userRegister);\r\n  const { success: recipeReviewSave } = useSelector((state) => state.addReview);\r\n\r\n  const dispatch = useDispatch();\r\n  const classes = useStyles();\r\n\r\n  useEffect(() => {\r\n    if (recipeReviewSave) {\r\n      setComment('');\r\n      setRating(0);\r\n    }\r\n    dispatch(rbook.recipe.detailsRecipe(props.match.params.id));\r\n    return () => {\r\n      //\r\n    };\r\n  }, [recipeReviewSave]);\r\n\r\n  const submitHandler = (e) => {\r\n  e.preventDefault();\r\n  if(user) {\r\n    dispatch(\r\n      rbook.recipe.saveRecipeReview(props.match.params.id, {\r\n        name: user.name,\r\n        rating: rating,\r\n        comment: comment,\r\n        userRole: user.role\r\n      })\r\n    );\r\n  } else {\r\n    dispatch(\r\n      rbook.recipe.saveRecipeReview(props.match.params.id, {\r\n        name: userInfo.name,\r\n        rating: rating,\r\n        comment: comment,\r\n        userRole: userInfo.role\r\n      })\r\n    );\r\n  }\r\n  setOpenSnackBar(true);\r\n};\r\n\r\nconst handleClose = (event, reason) => {\r\n  if (reason === 'clickaway') {\r\n    return;\r\n  }\r\n    setOpenSnackBar(false);\r\n};\r\n\r\nconst showSuccess = () => (\r\n  <Snackbar anchorOrigin={{ vertical: \"top\", horizontal: \"center\" }} open={openSnackBar} autoHideDuration={3000} onClose={handleClose}>\r\n    <Alert severity=\"success\">Comment added</Alert>\r\n  </Snackbar>\r\n);\r\n\r\nif(!recipe) return null\r\nif(!recipe.reviews) return null\r\n\r\n  return (\r\n    loading? <center className='loading1' ><CircularProgress color = 'dark' /></center> : error? <div>{error}</div> :\r\n    <>\r\n    {recipeReviewSave && showSuccess()}\r\n    {\r\n      recipe.name === undefined ? (\r\n        <div style = {{display: 'none'}}>loading</div>\r\n      ) : (\r\n        <div style = {{display: 'none'}}>{document.title=recipe.name}</div>\r\n      )\r\n    }\r\n     <center className = 'recipeName'>{recipe.name}</center>\r\n     <div key={recipe.name} className = 'details-container'>\r\n       <div className = 'card'>\r\n         <img\r\n           src={`/recipe/photo1/${recipe._id}`}\r\n           style={{ maxHeight: \"100%\", maxWidth: \"100%\", textAlign: 'center' }}\r\n           alt = {recipe.name}\r\n         />\r\n       </div>\r\n       <div style={{ maxWidth: \"30rem\", maxHeight: \"30rem\"  }} className = 'description card'>\r\n         <div style = {{ fontSize: '1.5rem' }} ><b>Description:</b></div>\r\n         <div>{recipe.description}</div>\r\n       </div>\r\n       <div className = 'instruction-container' style={{ width: \"30rem\", marginTop: '1%' }} className = 'description card'>\r\n         <div style = {{ fontSize: '1.5rem' }} ><b>Ingredients:</b></div>\r\n         <li style = {{ display: recipe.ingredients ? '' : 'none' }} ><i className = 'instructions'>{recipe.ingredients}</i></li>\r\n         <li style = {{ display: recipe.ingredients1 ? '' : 'none' }} ><i className = 'instructions'>{recipe.ingredients1}</i></li>\r\n         <li style = {{ display: recipe.ingredients2 ? '' : 'none' }} ><i className = 'instructions'>{recipe.ingredients2}</i></li>\r\n         <li style = {{ display: recipe.ingredients3 ? '' : 'none' }} ><i className = 'instructions'>{recipe.ingredients3}</i></li>\r\n         <li style = {{ display: recipe.ingredients4 ? '' : 'none' }} ><i className = 'instructions'>{recipe.ingredients4}</i></li>\r\n         <li style = {{ display: recipe.ingredients5 ? '' : 'none' }} ><i className = 'instructions'>{recipe.ingredients5}</i></li>\r\n         <li style = {{ display: recipe.ingredients6 ? '' : 'none' }} ><i className = 'instructions'>{recipe.ingredients6}</i></li>\r\n         <li style = {{ display: recipe.ingredients7 ? '' : 'none' }} ><i className = 'instructions'>{recipe.ingredients7}</i></li>\r\n         <li style = {{ display: recipe.ingredients8 ? '' : 'none' }} ><i className = 'instructions'>{recipe.ingredients8}</i></li>\r\n         <li style = {{ display: recipe.ingredients9 ? '' : 'none' }} ><i className = 'instructions'>{recipe.ingredients9}</i></li>\r\n         <li style = {{ display: recipe.ingredients10 ? '' : 'none' }} ><i className = 'instructions'>{recipe.ingredients10}</i></li>\r\n       </div>\r\n       <div className = 'instruction-container' style={{ width: \"30rem\", marginTop: '1%' }} className = 'description card'>\r\n         <div style = {{ fontSize: '1.5rem' }} ><b>Instructions:</b></div>\r\n         <li style = {{ display: recipe.instruction ? '' : 'none' }} ><i className = 'instructions'>{recipe.instruction}</i></li>\r\n         <li style = {{ display: recipe.instruction1 ? '' : 'none' }} ><i className = 'instructions'>{recipe.instruction1}</i></li>\r\n         <li style = {{ display: recipe.instruction2 ? '' : 'none' }} ><i className = 'instructions'>{recipe.instruction2}</i></li>\r\n         <li style = {{ display: recipe.instruction3 ? '' : 'none' }} ><i className = 'instructions'>{recipe.instruction3}</i></li>\r\n         <li style = {{ display: recipe.instruction4 ? '' : 'none' }} ><i className = 'instructions'>{recipe.instruction4}</i></li>\r\n         <li style = {{ display: recipe.instruction5 ? '' : 'none' }} ><i className = 'instructions'>{recipe.instruction5}</i></li>\r\n         <li style = {{ display: recipe.instruction6 ? '' : 'none' }} ><i className = 'instructions'>{recipe.instruction6}</i></li>\r\n         <li style = {{ display: recipe.instruction7 ? '' : 'none' }} ><i className = 'instructions'>{recipe.instruction7}</i></li>\r\n         <li style = {{ display: recipe.instruction8 ? '' : 'none' }} ><i className = 'instructions'>{recipe.instruction8}</i></li>\r\n         <li style = {{ display: recipe.instruction9 ? '' : 'none' }} ><i className = 'instructions'>{recipe.instruction9}</i></li>\r\n         <li style = {{ display: recipe.instruction10 ? '' : 'none' }} ><i className = 'instructions'>{recipe.instruction10}</i></li>\r\n       </div>\r\n     </div>\r\n     <hr/>\r\n     <div className=\"reviews\">\r\n       <div className = 'reviewsTitle'>Rate this recipe</div>\r\n       <Rating\r\n         name=\"rating\"\r\n         id='rating'\r\n         value={rating}\r\n         onChange={(event, newValue) => {\r\n           setRating(newValue);\r\n         }}\r\n       />\r\n     </div>\r\n     {userInfo || user ? (\r\n       <>\r\n       <div className = 'reviews'>\r\n         <div className = 'reviewsTitle'>Write a comment here</div>\r\n         <form className = 'form-container' onSubmit = {submitHandler}>\r\n           <div class=\"form-group\">\r\n             <FormControl className={(classes.margin, classes.textField)}>\r\n               <TextField\r\n                 id=\"comment\"\r\n                 label=\"Comment\"\r\n                 multiline\r\n                 name=\"comment\"\r\n                 onChange={(e) => setComment(e.target.value)}\r\n                 variant=\"outlined\"\r\n                 rows={4}\r\n               />\r\n             </FormControl>\r\n           </div>\r\n           <Button variant=\"contained\" type=\"submit\">Comment</Button>\r\n         </form>\r\n       </div>\r\n       </>\r\n     ) : (\r\n       <div>\r\n         Please <Link to=\"/\">Sign-in</Link> to write a reviews.\r\n       </div>\r\n     )}\r\n     <hr/>\r\n     <div className=\"reviews\" >\r\n       <div className = 'reviewsTitle'>Reviews</div>\r\n       {recipe.reviews.length > 0 ? (\r\n         <div>\r\n           {recipe.reviews && recipe.reviews\r\n             .map((review) => (\r\n              <>\r\n             <div style={{marginTop:'2.5rem'}} key={review._id}>\r\n               { review.userRole === 1 ? (\r\n                 <b style = {{ fontSize: '1.1rem' }} >{review.name} (Admin)</b>\r\n               ) : (\r\n                 <b style = {{ fontSize: '1.1rem' }} >{review.name}</b>\r\n               ) }\r\n               <div><Rating precision={.1} readOnly value={review.rating}/></div>\r\n               <div style = {{ fontSize: '1rem' }} >{review.comment}</div>\r\n             </div>\r\n             </>\r\n           ))}\r\n         </div>\r\n       ) : (\r\n         <h3>\r\n          There are no reviews in this recipe. Write the first one\r\n         </h3>\r\n       )}\r\n     </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default RecipeDetails;\r\n","C:\\Users\\pillo\\recipebook\\src\\pages\\signin.js",[],"C:\\Users\\pillo\\recipebook\\src\\pages\\signup.js",[],"C:\\Users\\pillo\\recipebook\\src\\adminPage\\createRecipe.js",["142"],"import React, { useEffect, useState } from 'react'\r\n\r\n//redux\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { rbook } from '../redux/combineActions';\r\n\r\n//navigation\r\nimport { Link } from 'react-router-dom';\r\n\r\n//material-ui\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport Button from '@material-ui/core/Button';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport Input from '@material-ui/core/Input';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport Select from '@material-ui/core/Select';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\n\r\n//styling for material-ui\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n  },\r\n  margin: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  withoutLabel: {\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  textField: {\r\n    marginBottom: '3%',\r\n    width: '100%',\r\n    '& label.Mui-focused': {\r\n      color: '#FF3F16',\r\n    },\r\n    '& .MuiInput-underline:after': {\r\n      borderBottomColor: '#FF3F16',\r\n    },\r\n    '& .MuiOutlinedInput-root': {\r\n        '&.Mui-focused fieldset': {\r\n           borderColor: '#FF3F16',\r\n        },\r\n    },\r\n  },\r\n}));\r\n\r\nconst CreateRecipe = (props) => {\r\n  const classes = useStyles();\r\n  const [name, setName] = useState('');\r\n  const [description, setDescription] = useState('');\r\n  const [category, setCategory] = useState('');\r\n  const [ingredients, setIngredients] = useState('');\r\n  const [ingredients1, setIngredients1] = useState('');\r\n  const [ingredients2, setIngredients2] = useState('');\r\n  const [ingredients3, setIngredients3] = useState('');\r\n  const [ingredients4, setIngredients4] = useState('');\r\n  const [ingredients5, setIngredients5] = useState('');\r\n  const [ingredients6, setIngredients6] = useState('');\r\n  const [ingredients7, setIngredients7] = useState('');\r\n  const [ingredients8, setIngredients8] = useState('');\r\n  const [ingredients9, setIngredients9] = useState('');\r\n  const [ingredients10, setIngredients10] = useState('');\r\n  const [instruction, setInstruction] = useState('');\r\n  const [instruction1, setInstruction1] = useState('');\r\n  const [instruction2, setInstruction2] = useState('');\r\n  const [instruction3, setInstruction3] = useState('');\r\n  const [instruction4, setInstruction4] = useState('');\r\n  const [instruction5, setInstruction5] = useState('');\r\n  const [instruction6, setInstruction6] = useState('');\r\n  const [instruction7, setInstruction7] = useState('');\r\n  const [instruction8, setInstruction8] = useState('');\r\n  const [instruction9, setInstruction9] = useState('');\r\n  const [instruction10, setInstruction10] = useState('');\r\n  const [photo, setPhoto] = useState('');\r\n  const [photo1, setPhoto1] = useState('');\r\n  const [openSnackBar, setOpenSnackBar] = useState(false);\r\n\r\n  const { user } = useSelector((state) => state.userSignin);\r\n  const { loading, recipe, error, success } = useSelector(state => state.addRecipe);\r\n  const { categories } = useSelector(state => state.listCategories);\r\n\r\n  const recipeBy = user.name;\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    if (recipe) {\r\n      //\r\n    }\r\n    return () => {\r\n      //\r\n    };\r\n  }, [recipe]);\r\n\r\n  useEffect(() => {\r\n    dispatch(rbook.category.listCategories());\r\n    return () => {\r\n    //\r\n    };\r\n  }, [])\r\n\r\n  const submitHandler = (event) => {\r\n    event.preventDefault();\r\n    const payload = {\r\n      name,\r\n      description,\r\n      category,\r\n      recipeBy,\r\n      ingredients,\r\n      ingredients1,\r\n      ingredients2,\r\n      ingredients3,\r\n      ingredients4,\r\n      ingredients5,\r\n      ingredients6,\r\n      ingredients7,\r\n      ingredients8,\r\n      ingredients9,\r\n      ingredients10,\r\n      instruction,\r\n      instruction1,\r\n      instruction2,\r\n      instruction3,\r\n      instruction4,\r\n      instruction5,\r\n      instruction6,\r\n      instruction7,\r\n      instruction8,\r\n      instruction9,\r\n      instruction10,\r\n      photo,\r\n      photo1\r\n    }\r\n    dispatch(rbook.recipe.addRecipe(payload));\r\n    setOpenSnackBar(true)\r\n  }\r\n\r\n  const handleClose = (event, reason) => {\r\n    if (reason === 'clickaway') {\r\n      return;\r\n    }\r\n    setOpenSnackBar(false);\r\n  };\r\n\r\n  const showError = () => (\r\n    <Snackbar anchorOrigin={{ vertical: \"top\", horizontal: \"center\" }} open={openSnackBar} autoHideDuration={3000} onClose={handleClose}>\r\n      <Alert severity=\"error\">{error}</Alert>\r\n    </Snackbar>\r\n  );\r\n\r\n  const showSuccess= () => (\r\n    <Snackbar anchorOrigin={{ vertical: \"top\", horizontal: \"center\" }} open={openSnackBar} autoHideDuration={3000} onClose={handleClose}>\r\n      <Alert severity=\"success\">{recipe && recipe.name} added in recipes!</Alert>\r\n    </Snackbar>\r\n  );\r\n\r\n  const addRecipeForm = () => (\r\n    <>\r\n    <center className = 'welcomeTitle'>Create new recipe here</center>\r\n    <div className = 'container'>\r\n      {success && !error && showSuccess()}\r\n      {!success && error && showError()}\r\n      <form onSubmit = {submitHandler} className = 'form-container'>\r\n        <FormControl className={(classes.margin, classes.textField)}>\r\n          <InputLabel color=\"primary\">Name of the recipe</InputLabel>\r\n          <Input\r\n            type = \"text\"\r\n            onChange={(e) => setName(e.target.value)}\r\n            required\r\n            id = 'name'\r\n            name = 'name'\r\n          />\r\n        </FormControl>\r\n        <FormControl className={(classes.margin, classes.textField)}>\r\n          <TextField\r\n            id=\"description\"\r\n            label=\"Description\"\r\n            multiline\r\n            name=\"description\"\r\n            onChange={(e) => setDescription(e.target.value)}\r\n            variant=\"outlined\"\r\n            rows={4}\r\n          />\r\n        </FormControl>\r\n        <FormControl className={(classes.margin, classes.textField)}>\r\n          <InputLabel htmlFor=\"age-native-simple\">Category</InputLabel>\r\n          <Select\r\n            native\r\n            onChange={(e) => setCategory(e.target.value)}\r\n            inputProps={{\r\n              name: 'category',\r\n              id: 'category',\r\n            }}\r\n          >\r\n            <option>Select category</option>\r\n            {categories &&\r\n             categories.map((c, i) => (\r\n               <option key={i} value={c._id}>\r\n                   {c.name}\r\n               </option>\r\n            ))}\r\n          </Select>\r\n        </FormControl>\r\n        <FormControl className={(classes.margin, classes.textField)}>\r\n          <InputLabel color=\"primary\">Ingredient 1 (required)</InputLabel>\r\n          <Input\r\n            type = \"text\"\r\n            onChange={(e) => setIngredients(e.target.value)}\r\n            required\r\n            id = 'ingredients'\r\n            name = 'ingredients'\r\n          />\r\n        </FormControl>\r\n        <FormControl className={(classes.margin, classes.textField)}>\r\n          <InputLabel color=\"primary\">Ingredient 2 (required)</InputLabel>\r\n          <Input\r\n            type = \"text\"\r\n            onChange={(e) => setIngredients1(e.target.value)}\r\n            required\r\n            id = 'ingredients1'\r\n            name = 'ingredients1'\r\n          />\r\n        </FormControl>\r\n        <FormControl className={(classes.margin, classes.textField)}>\r\n          <InputLabel color=\"primary\">Ingredient 3 (required)</InputLabel>\r\n          <Input\r\n            type = \"text\"\r\n            onChange={(e) => setIngredients2(e.target.value)}\r\n            required\r\n            id = 'ingredients2'\r\n            name = 'ingredients2'\r\n          />\r\n        </FormControl>\r\n        <FormControl className={(classes.margin, classes.textField)}>\r\n          <InputLabel color=\"primary\">Ingredient 4 (if necesarry)</InputLabel>\r\n          <Input\r\n            type = \"text\"\r\n            onChange={(e) => setIngredients3(e.target.value)}\r\n            id = 'ingredients3'\r\n            name = 'ingredients3'\r\n          />\r\n        </FormControl>\r\n        <FormControl className={(classes.margin, classes.textField)}>\r\n          <InputLabel color=\"primary\">Ingredient 5 (if necesarry)</InputLabel>\r\n          <Input\r\n            type = \"text\"\r\n            onChange={(e) => setIngredients4(e.target.value)}\r\n            id = 'ingredients4'\r\n            name = 'ingredients4'\r\n          />\r\n        </FormControl>\r\n        <FormControl className={(classes.margin, classes.textField)}>\r\n          <InputLabel color=\"primary\">Ingredient 6 (if necesarry)</InputLabel>\r\n          <Input\r\n            type = \"text\"\r\n            onChange={(e) => setIngredients5(e.target.value)}\r\n            id = 'ingredients5'\r\n            name = 'ingredients5'\r\n          />\r\n        </FormControl>\r\n        <FormControl className={(classes.margin, classes.textField)}>\r\n          <InputLabel color=\"primary\">Ingredient 7 (if necesarry)</InputLabel>\r\n          <Input\r\n            type = \"text\"\r\n            onChange={(e) => setIngredients6(e.target.value)}\r\n            id = 'ingredients6'\r\n            name = 'ingredients6'\r\n          />\r\n        </FormControl>\r\n        <FormControl className={(classes.margin, classes.textField)}>\r\n          <InputLabel color=\"primary\">Ingredient 8 (if necesarry)</InputLabel>\r\n          <Input\r\n            type = \"text\"\r\n            onChange={(e) => setIngredients7(e.target.value)}\r\n            id = 'ingredients7'\r\n            name = 'ingredients7'\r\n          />\r\n        </FormControl>\r\n        <FormControl className={(classes.margin, classes.textField)}>\r\n          <InputLabel color=\"primary\">Ingredient 9 (if necesarry)</InputLabel>\r\n          <Input\r\n            type = \"text\"\r\n            onChange={(e) => setIngredients8(e.target.value)}\r\n            id = 'ingredients8'\r\n            name = 'ingredients8'\r\n          />\r\n        </FormControl>\r\n        <FormControl className={(classes.margin, classes.textField)}>\r\n          <InputLabel color=\"primary\">Ingredient 10 (if necesarry)</InputLabel>\r\n          <Input\r\n            type = \"text\"\r\n            onChange={(e) => setIngredients9(e.target.value)}\r\n            id = 'ingredients9'\r\n            name = 'ingredients9'\r\n          />\r\n        </FormControl>\r\n        <FormControl className={(classes.margin, classes.textField)}>\r\n          <InputLabel color=\"primary\">Ingredient 11 (if necesarry)</InputLabel>\r\n          <Input\r\n            type = \"text\"\r\n            onChange={(e) => setIngredients10(e.target.value)}\r\n            id = 'ingredients10'\r\n            name = 'ingredients10'\r\n          />\r\n        </FormControl>\r\n        <FormControl className={(classes.margin, classes.textField)}>\r\n          <InputLabel color=\"primary\">Instruction 1 (required)</InputLabel>\r\n          <Input\r\n            type = \"text\"\r\n            onChange={(e) => setInstruction(e.target.value)}\r\n            required\r\n            id = 'instruction'\r\n            name = 'instruction'\r\n          />\r\n        </FormControl>\r\n        <FormControl className={(classes.margin, classes.textField)}>\r\n          <InputLabel color=\"primary\">Instruction 2 (required)</InputLabel>\r\n          <Input\r\n            type = \"text\"\r\n            onChange={(e) => setInstruction1(e.target.value)}\r\n            required\r\n            id = 'instruction1'\r\n            name = 'instruction1'\r\n          />\r\n        </FormControl>\r\n        <FormControl className={(classes.margin, classes.textField)}>\r\n          <InputLabel color=\"primary\">Instruction 3 (required)</InputLabel>\r\n          <Input\r\n            type = \"text\"\r\n            onChange={(e) => setInstruction2(e.target.value)}\r\n            required\r\n            id = 'instruction2'\r\n            name = 'instruction2'\r\n          />\r\n        </FormControl>\r\n        <FormControl className={(classes.margin, classes.textField)}>\r\n          <InputLabel color=\"primary\">Instruction 4 (if necesarry)</InputLabel>\r\n          <Input\r\n            type = \"text\"\r\n            onChange={(e) => setInstruction3(e.target.value)}\r\n            id = 'instruction3'\r\n            name = 'instruction3'\r\n          />\r\n        </FormControl>\r\n        <FormControl className={(classes.margin, classes.textField)}>\r\n          <InputLabel color=\"primary\">Instruction 5 (if necesarry)</InputLabel>\r\n          <Input\r\n            type = \"text\"\r\n            onChange={(e) => setInstruction4(e.target.value)}\r\n            id = 'instruction4'\r\n            name = 'instruction4'\r\n          />\r\n        </FormControl>\r\n        <FormControl className={(classes.margin, classes.textField)}>\r\n          <InputLabel color=\"primary\">Instruction 6 (if necesarry)</InputLabel>\r\n          <Input\r\n            type = \"text\"\r\n            onChange={(e) => setInstruction5(e.target.value)}\r\n            id = 'instruction5'\r\n            name = 'instruction5'\r\n          />\r\n        </FormControl>\r\n        <FormControl className={(classes.margin, classes.textField)}>\r\n          <InputLabel color=\"primary\">Instruction 7 (if necesarry)</InputLabel>\r\n          <Input\r\n            type = \"text\"\r\n            onChange={(e) => setInstruction6(e.target.value)}\r\n            id = 'instruction6'\r\n            name = 'instruction6'\r\n          />\r\n        </FormControl>\r\n        <FormControl className={(classes.margin, classes.textField)}>\r\n          <InputLabel color=\"primary\">Instruction 8 (if necesarry)</InputLabel>\r\n          <Input\r\n            type = \"text\"\r\n            onChange={(e) => setInstruction7(e.target.value)}\r\n            id = 'instruction7'\r\n            name = 'instruction7'\r\n          />\r\n        </FormControl>\r\n        <FormControl className={(classes.margin, classes.textField)}>\r\n          <InputLabel color=\"primary\">Instruction 9 (if necesarry)</InputLabel>\r\n          <Input\r\n            type = \"text\"\r\n            onChange={(e) => setInstruction8(e.target.value)}\r\n            id = 'instruction8'\r\n            name = 'instruction8'\r\n          />\r\n        </FormControl>\r\n        <FormControl className={(classes.margin, classes.textField)}>\r\n          <InputLabel color=\"primary\">Instruction 10 (if necesarry)</InputLabel>\r\n          <Input\r\n            type = \"text\"\r\n            onChange={(e) => setInstruction9(e.target.value)}\r\n            id = 'instruction9'\r\n            name = 'instruction9'\r\n          />\r\n        </FormControl>\r\n        <FormControl className={(classes.margin, classes.textField)}>\r\n          <InputLabel color=\"primary\">Instruction 11 (if necesarry)</InputLabel>\r\n          <Input\r\n            type = \"text\"\r\n            onChange={(e) => setInstruction10(e.target.value)}\r\n            id = 'instruction10'\r\n            name = 'instruction10'\r\n          />\r\n        </FormControl>\r\n        <div className={classes.root}>\r\n          <input\r\n            accept=\"image/*\"\r\n            className={classes.input}\r\n            id=\"photo\"\r\n            type=\"file\"\r\n            name = 'photo'\r\n            onChange={(e) => setPhoto(e.target.files[0])}\r\n          />\r\n          <label htmlFor=\"photo\">\r\n            <Button variant=\"contained\" color=\"primary\" component=\"span\" startIcon={<CloudUploadIcon />}>\r\n              Upload Recipe Photo\r\n            </Button>\r\n          </label>\r\n        </div>\r\n        <div className={classes.root}>\r\n          <input\r\n          accept=\"image/*\"\r\n          className={classes.input}\r\n          id=\"photo1\"\r\n          type=\"file\"\r\n          name = 'photo1'\r\n          onChange={(e) => setPhoto1(e.target.files[0])}\r\n          />\r\n          <label htmlFor=\"photo1\">\r\n            <Button variant=\"contained\" color=\"primary\" component=\"span\" startIcon={<CloudUploadIcon />}>\r\n              Upload Recipe Details Photo\r\n            </Button>\r\n          </label>\r\n        </div>\r\n        <Button startIcon={<SaveIcon />} variant=\"contained\" type=\"submit\">Save Recipe</Button>\r\n        <center style = {{marginTop: '1%', fontSize: 20}} ><Link className = 'adminLinks' to = '/admin'>Go back to admin page</Link></center>\r\n      </form>\r\n    </div>\r\n    </>\r\n  )\r\n\r\n  document.title = 'Recipebook | CreateRecipe'\r\n\r\n  return (\r\n    loading? <CircularProgress color = 'dark' className = 'loading1' /> :\r\n    <>\r\n     {addRecipeForm()}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default CreateRecipe;\r\n","C:\\Users\\pillo\\recipebook\\src\\redux\\actions\\index.js",[],"C:\\Users\\pillo\\recipebook\\src\\redux\\actions\\recipe.js",[],["143","144"],"C:\\Users\\pillo\\recipebook\\src\\pages\\home.js",["145","146","147"],"import React, { useEffect } from 'react';\r\n\r\n//redux\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { rbook } from '../redux/combineActions';\r\n\r\n//navigation\r\nimport { Link } from 'react-router-dom';\r\n\r\n//material-ui\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport Rating from '@material-ui/lab/Rating';\r\nimport Box from '@material-ui/core/Box';\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    maxHeight: \"35rem\",\r\n    maxWidth: \"15rem\",\r\n    marginLeft: '.7rem',\r\n    whiteSpace: 'nowrap',\r\n    marginTop: '1rem'\r\n  },\r\n});\r\n\r\nconst Home = () => {\r\n\r\n  document.title='Recipebook | Home';\r\n\r\n  const recipeRate = useSelector(state => state.recipeRate);\r\n  const { recipes, loading, error } = recipeRate;\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const classes = useStyles();\r\n\r\n  const { user } = useSelector((state) => state.userSignin);\r\n  const { userInfo } = useSelector((state) => state.userRegister);\r\n\r\n  useEffect(() => {\r\n    dispatch(rbook.recipe.listRateRecipes());\r\n    return () => {\r\n    //\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    loading? <center className='loading1' ><CircularProgress color = 'dark' /></center> : error? <div>{error}</div> :\r\n    <>\r\n      <center className = 'welcomeTitle'>Popular recipes</center>\r\n      <div className = 'home-container'>\r\n      { recipes.length > 0 ? (\r\n        <>\r\n          {\r\n           recipes.map( recipes =>\r\n            <Card key={recipes.name} className={classes.root}>\r\n               <CardMedia\r\n                 component=\"img\"\r\n                 alt={recipes.name}\r\n                 height=\"250\"\r\n                 image={`/recipe/photo/${recipes._id}`}\r\n                 title={recipes.name}\r\n               />\r\n               <CardContent>\r\n                 <Typography gutterBottom variant=\"h6\">\r\n                   <Box\r\n                     component=\"div\"\r\n                     my={2}\r\n                     textOverflow=\"ellipsis\"\r\n                     overflow=\"hidden\"\r\n                   >\r\n                     {recipes.name}\r\n                   </Box>\r\n                 </Typography>\r\n                 <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                   <Rating precision={.2} readOnly value={recipes.rating.toFixed(1)}/> <div style = {{fontSize: \"1.5rem\"}}>{recipes.rating.toFixed(1)}</div>\r\n                 </Typography>\r\n                 <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                   <div style = {{fontSize: \"1rem\"}}>Number of reviews: {recipes.numReviews}</div>\r\n                 </Typography>\r\n               </CardContent>\r\n               <CardActions>\r\n                 <Link to = {`/recipe/${recipes._id}`}>\r\n                   <Button size=\"small\" color=\"primary\">\r\n                     Read more\r\n                   </Button>\r\n                 </Link>\r\n               </CardActions>\r\n             </Card>\r\n            )\r\n           }\r\n         </>\r\n      ) : (\r\n        <div style = {{fontSize: '4rem'}} >No recipes found</div>\r\n      ) }\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Home;\r\n","C:\\Users\\pillo\\recipebook\\src\\pages\\newRecipes.js",["148"],"import React, { useEffect } from 'react';\r\n\r\n//redux\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { rbook } from '../redux/combineActions';\r\n\r\n//navigation\r\nimport { Link } from 'react-router-dom';\r\n\r\n//material-ui\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Rating from '@material-ui/lab/Rating';\r\nimport Box from '@material-ui/core/Box';\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    maxHeight: \"35rem\",\r\n    maxWidth: \"15rem\",\r\n    marginTop: '1rem',\r\n    marginLeft: '.7rem',\r\n    whiteSpace: 'nowrap'\r\n  },\r\n});\r\n\r\nconst NewRecipes = () => {\r\n  const { recipes, loading, error } = useSelector(state => state.recipeList);\r\n\r\n  const dispatch = useDispatch();\r\n  const classes = useStyles();\r\n\r\n  useEffect(() => {\r\n    dispatch(rbook.recipe.listRecipes());\r\n    return () => {\r\n    //\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    loading? null : error? <div>{error}</div> :\r\n    <>\r\n      <center style={{marginTop:\"2%\"}} className = 'welcomeTitle'>New recipes for you</center>\r\n      <div className = 'home-container'>\r\n      { recipes.length > 0 ? (\r\n        <>\r\n          {\r\n           recipes.map( recipes =>\r\n            <Card key={recipes.name} className={classes.root}>\r\n               <CardMedia\r\n                 component=\"img\"\r\n                 alt={recipes.name}\r\n                 height=\"250\"\r\n                 image={`/recipe/photo/${recipes._id}`}\r\n                 title={recipes.name}\r\n               />\r\n               <CardContent>\r\n                 <Typography gutterBottom variant=\"h6\">\r\n                   <Box\r\n                     component=\"div\"\r\n                     my={2}\r\n                     textOverflow=\"ellipsis\"\r\n                     overflow=\"hidden\"\r\n                   >\r\n                     {recipes.name}\r\n                   </Box>\r\n                 </Typography>\r\n                 <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                   <Rating precision={.2} readOnly value={recipes.rating.toFixed(1)}/> <div style = {{fontSize: \"1.5rem\"}}>{recipes.rating.toFixed(1)}</div>\r\n                 </Typography>\r\n                 <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                   <div style = {{fontSize: \"1rem\"}}>Number of reviews: {recipes.numReviews}</div>\r\n                 </Typography>\r\n               </CardContent>\r\n               <CardActions>\r\n                 <Link to = {`/recipe/${recipes._id}`}>\r\n                   <Button size=\"small\" color=\"primary\">\r\n                     Read more\r\n                   </Button>\r\n                 </Link>\r\n               </CardActions>\r\n             </Card>\r\n            )\r\n           }\r\n         </>\r\n      ) : (\r\n        <div style = {{fontSize: '4rem'}} >No recipes found</div>\r\n      ) }\r\n      </div>\r\n      <center>\r\n        <Button style = {{marginTop:'3%'}} variant=\"contained\" color=\"primary\" href=\"/recipes\">\r\n          View All recipes\r\n        </Button>\r\n      </center>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default NewRecipes;\r\n","C:\\Users\\pillo\\recipebook\\src\\redux\\store.js",[],["149","150"],"C:\\Users\\pillo\\recipebook\\src\\components\\navbar.js",[],"C:\\Users\\pillo\\recipebook\\src\\index.js",[],"C:\\Users\\pillo\\recipebook\\src\\components\\footer.js",[],"C:\\Users\\pillo\\recipebook\\src\\pages\\default.js",[],"C:\\Users\\pillo\\recipebook\\src\\pages\\about.js",[],"C:\\Users\\pillo\\recipebook\\src\\pages\\mainHomepage.js",[],"C:\\Users\\pillo\\recipebook\\src\\adminPage\\adminPage.js",[],"C:\\Users\\pillo\\recipebook\\src\\routes\\adminRoute.js",[],"C:\\Users\\pillo\\recipebook\\src\\pages\\allRecipe.js",[],"C:\\Users\\pillo\\recipebook\\src\\redux\\reducers\\recipeReducers.js",[],"C:\\Users\\pillo\\recipebook\\src\\redux\\reducers\\categoryReducers.js",[],"C:\\Users\\pillo\\recipebook\\src\\redux\\reducers\\userReducers.js",[],"C:\\Users\\pillo\\recipebook\\src\\redux\\combineActions.js",[],"C:\\Users\\pillo\\recipebook\\src\\redux\\actions\\user.js",[],"C:\\Users\\pillo\\recipebook\\src\\redux\\actions\\category.js",[],"C:\\Users\\pillo\\recipebook\\src\\routes\\loggedInRoute.js",[],"C:\\Users\\pillo\\recipebook\\src\\pages\\searchPage.js",["151"],"import React, { useState, useEffect, useCallback } from 'react';\r\n\r\n//redux\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { rbook } from '../redux/combineActions';\r\n\r\n//navigation\r\nimport { Link, useHistory } from 'react-router-dom';\r\n\r\n//material-ui\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Rating from '@material-ui/lab/Rating';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport Pagination from \"@material-ui/lab/Pagination\";\r\nimport Box from '@material-ui/core/Box';\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    maxHeight: \"33rem\",\r\n    maxWidth: \"15rem\",\r\n    marginLeft: '.7rem',\r\n    marginTop: \"1rem\",\r\n    whiteSpace: 'nowrap'\r\n  },\r\n  paginator: {\r\n    justifyContent: \"center\",\r\n    padding: \"10px\",\r\n    marginTop:'1%',\r\n    backgroundColor: \"#FFFFFF\",\r\n  }\r\n});\r\n\r\nconst SearchPage = ({ location }) => {\r\n  const [recipeList, setRecipeList] = useState([]);\r\n  const [pageDetails, setPageDetails] = useState(null);\r\n  const [pageSize] = useState(5);\r\n\r\n  document.title='Recipebook | Searched Recipes';\r\n\r\n  const { loading, error } = useSelector(state => state.recipeSearch);\r\n\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n  const classes = useStyles();\r\n\r\n  const params = new URLSearchParams(location.search);\r\n  const searchKeyword = params.get('keyword');\r\n\r\n  const handleRecipeList = useCallback(\r\n    (pageIndex = 1) => {\r\n      dispatch(rbook.recipe.listSearchRecipes(searchKeyword, pageIndex, pageSize))\r\n        .then((data) => {\r\n          if (data) {\r\n            setRecipeList(data.docs);\r\n            setPageDetails({\r\n              pageIndex: data.page,\r\n              pageSize: data.limit,\r\n              totalPages: data.totalPages,\r\n              totalDocs: data.totalDocs\r\n            });\r\n          }\r\n        })\r\n    },\r\n    [dispatch, pageSize, searchKeyword],\r\n  );\r\n\r\n  useEffect(() => {\r\n    if(searchKeyword === null || !searchKeyword){\r\n      history.push('/recipes')\r\n    } else {\r\n      handleRecipeList();\r\n    }\r\n  }, [handleRecipeList]);\r\n\r\n  if(!pageDetails) return null;\r\n\r\n  const handleChangePageIndex = (event, value) => {\r\n    handleRecipeList(value);\r\n  };\r\n\r\n  const createBanana = (recipe, idx) => {\r\n    return (\r\n      <Card style = {{ display: loading && 'none' }} key={idx} className={classes.root}>\r\n         <CardMedia\r\n           component=\"img\"\r\n           alt={recipe.name}\r\n           height=\"200\"\r\n           image={`/recipe/photo/${recipe._id}`}\r\n           title=\"Contemplative Reptile\"\r\n         />\r\n         <CardContent>\r\n           <Typography gutterBottom variant=\"h6\">\r\n             <Box\r\n               component=\"div\"\r\n               my={2}\r\n               textOverflow=\"ellipsis\"\r\n               overflow=\"hidden\"\r\n             >\r\n               {recipe.name}\r\n             </Box>\r\n           </Typography>\r\n           <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n             <Rating precision={.2} readOnly value={recipe.rating.toFixed(1)}/> <div style = {{fontSize: \"1.5rem\"}}>{recipe.rating.toFixed(1)}</div>\r\n           </Typography>\r\n           <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n             <div style = {{fontSize: \"1rem\"}}>Number of reviews: {recipe.numReviews}</div>\r\n           </Typography>\r\n         </CardContent>\r\n         <CardActions>\r\n           <Link to = {`/recipe/${recipe._id}`}>\r\n             <Button size=\"small\" color=\"primary\">\r\n               Read more\r\n             </Button>\r\n           </Link>\r\n         </CardActions>\r\n       </Card>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <center className = 'welcomeTitle'>Searched recipes</center>\r\n      <div className = 'home-container'>\r\n\r\n        {loading && <CircularProgress color = 'dark' className = 'loading' />}\r\n        {error && <div>{error}</div>}\r\n\r\n        {recipeList.length === 0 &&\r\n          <div style = {{fontSize: '4rem'}} >No recipes found</div>\r\n        }\r\n        {recipeList.map((recipe, index) => (\r\n          createBanana(recipe, index)\r\n        ))}\r\n      </div>\r\n\r\n      {pageDetails.totalDocs <= pageDetails.pageSize ?\r\n        (\r\n         null\r\n        ) : (\r\n          <Pagination\r\n            style = {{ display: loading && 'none' }}\r\n            count={pageDetails.totalPages}\r\n            page={pageDetails.pageIndex}\r\n            defaultPage={1}\r\n            color=\"primary\"\r\n            size=\"large\"\r\n            onChange={handleChangePageIndex}\r\n            showFirstButton\r\n            showLastButton\r\n            classes={{ ul: classes.paginator }}\r\n          />\r\n        )\r\n      }\r\n\r\n    </>\r\n  )\r\n}\r\n\r\nexport default SearchPage;\r\n","C:\\Users\\pillo\\recipebook\\src\\components\\navbarLow.js",["152"],"import React, { useState } from 'react';\r\n\r\n//redux\r\nimport { rbook } from '../redux/combineActions';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\n//navigation\r\nimport { useHistory } from 'react-router-dom';\r\nimport { Link } from 'react-router-dom';\r\n\r\n//logo\r\nimport logo from '../images/recipebook.jpg';\r\n\r\n//material-ui\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Container from '@material-ui/core/Container';\r\nimport TextField  from '@material-ui/core/TextField';\r\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\r\nimport { useTheme } from '@material-ui/core/styles';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport List from '@material-ui/core/List';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport ClearIcon from '@material-ui/icons/Clear';\r\nimport ListItem from '@material-ui/core/ListItem';\r\n\r\nconst HideAppBar = (props) => {\r\n  const [searchKeyword, setSearchKeyword] = useState('');\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n  const theme = useTheme();\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault();\r\n    dispatch(rbook.recipe.listSearchRecipes(searchKeyword));\r\n    setSearchKeyword('');\r\n    setOpen(false);\r\n    history.push('/search?keyword=' + searchKeyword)\r\n    if (searchKeyword === null) {\r\n      history.push('/recipes')\r\n    }\r\n  };\r\n\r\n  const handleLogout = () => {\r\n    dispatch(rbook.user.logout());\r\n    setOpen(false);\r\n  };\r\n\r\n\r\n  const handleDrawerOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleDrawerClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const { user } = useSelector((state) => state.userSignin);\r\n  const { userInfo } = useSelector((state) => state.userRegister);\r\n\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <CssBaseline />\r\n      <div className=\"appbar\">\r\n        <AppBar style={{background:\"#000000\"}}>\r\n          <Toolbar>\r\n            {userInfo || user ? (\r\n              <IconButton\r\n                color=\"inherit\"\r\n                aria-label=\"open drawer\"\r\n                onClick={handleDrawerOpen}\r\n                edge=\"end\"\r\n               >\r\n                <MenuIcon />\r\n              </IconButton>\r\n            ) : (\r\n              null\r\n            )}\r\n            <ul className = \"navigation\">\r\n              <li className = 'title'><img src = {logo} alt = 'logo'/></li>\r\n            </ul>\r\n          <Drawer\r\n            variant=\"persistent\"\r\n            anchor=\"left\"\r\n            open={open}\r\n          >\r\n            <div>\r\n              <IconButton onClick={handleDrawerClose}>\r\n                <ClearIcon/>\r\n              </IconButton>\r\n            </div>\r\n            <Divider />\r\n              <List>\r\n                  <ListItem>\r\n                  <div>\r\n                    <form onSubmit={submitHandler}>\r\n                      <TextField\r\n                       placeholder = 'Search for recipes?'\r\n                       className = 'searchBar'\r\n                       style = {{ marginTop: '3%' }}\r\n                       id=\"outlined-search\"\r\n                       type=\"search\"\r\n                       variant=\"outlined\"\r\n                       name=\"searchKeyword\"\r\n                       value={searchKeyword}\r\n                       onChange={(e) => setSearchKeyword(e.target.value)}\r\n                      />\r\n                    </form>\r\n                  </div>\r\n                  <Divider/>\r\n                  </ListItem>\r\n                  <ListItem>\r\n                    <ul className=\"sideBar\">\r\n                      <li><Link onClick ={handleDrawerClose} to = '/home'>Home</Link></li>\r\n                      <li><Link onClick ={handleDrawerClose} to = '/about'>About Us</Link></li>\r\n                      {\r\n                        user && user.role === 1 ? (\r\n                          <li><Link onClick ={handleDrawerClose} to = '/admin'>Admin</Link></li>\r\n                        ) : (\r\n                          null\r\n                        )\r\n                      }\r\n                      <li><Link onClick={handleLogout}><ExitToAppIcon/></Link></li>\r\n                    </ul>\r\n                </ListItem>\r\n              </List>\r\n          </Drawer>\r\n          </Toolbar>\r\n        </AppBar>\r\n        </div>\r\n      <Toolbar />\r\n      <Container>\r\n      </Container>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default HideAppBar\r\n",{"ruleId":"153","replacedBy":"154"},{"ruleId":"155","replacedBy":"156"},{"ruleId":"157","severity":1,"message":"158","line":20,"column":8,"nodeType":"159","messageId":"160","endLine":20,"endColumn":17},{"ruleId":"161","severity":1,"message":"162","line":68,"column":6,"nodeType":"163","endLine":68,"endColumn":24,"suggestions":"164"},{"ruleId":"165","severity":1,"message":"166","line":134,"column":93,"nodeType":"167","endLine":134,"endColumn":123},{"ruleId":"165","severity":1,"message":"166","line":148,"column":93,"nodeType":"167","endLine":148,"endColumn":123},{"ruleId":"161","severity":1,"message":"168","line":107,"column":6,"nodeType":"163","endLine":107,"endColumn":8,"suggestions":"169"},{"ruleId":"153","replacedBy":"170"},{"ruleId":"155","replacedBy":"171"},{"ruleId":"157","severity":1,"message":"172","line":43,"column":11,"nodeType":"159","messageId":"160","endLine":43,"endColumn":15},{"ruleId":"157","severity":1,"message":"173","line":44,"column":11,"nodeType":"159","messageId":"160","endLine":44,"endColumn":19},{"ruleId":"161","severity":1,"message":"168","line":51,"column":6,"nodeType":"163","endLine":51,"endColumn":8,"suggestions":"174"},{"ruleId":"161","severity":1,"message":"168","line":42,"column":6,"nodeType":"163","endLine":42,"endColumn":8,"suggestions":"175"},{"ruleId":"153","replacedBy":"176"},{"ruleId":"155","replacedBy":"177"},{"ruleId":"161","severity":1,"message":"178","line":79,"column":6,"nodeType":"163","endLine":79,"endColumn":24,"suggestions":"179"},{"ruleId":"157","severity":1,"message":"180","line":36,"column":9,"nodeType":"159","messageId":"160","endLine":36,"endColumn":14},"no-native-reassign",["181"],"no-negated-in-lhs",["182"],"no-unused-vars","'TextField' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatch' and 'props.match.params.id'. Either include them or remove the dependency array.","ArrayExpression",["183"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["184"],["181"],["182"],"'user' is assigned a value but never used.","'userInfo' is assigned a value but never used.",["185"],["186"],["181"],["182"],"React Hook useEffect has missing dependencies: 'history' and 'searchKeyword'. Either include them or remove the dependency array.",["187"],"'theme' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"188","fix":"189"},{"desc":"190","fix":"191"},{"desc":"190","fix":"192"},{"desc":"190","fix":"193"},{"desc":"194","fix":"195"},"Update the dependencies array to be: [dispatch, props.match.params.id, recipeReviewSave]",{"range":"196","text":"197"},"Update the dependencies array to be: [dispatch]",{"range":"198","text":"199"},{"range":"200","text":"199"},{"range":"201","text":"199"},"Update the dependencies array to be: [handleRecipeList, history, searchKeyword]",{"range":"202","text":"203"},[1923,1941],"[dispatch, props.match.params.id, recipeReviewSave]",[3613,3615],"[dispatch]",[1442,1444],[1165,1167],[2376,2394],"[handleRecipeList, history, searchKeyword]"]